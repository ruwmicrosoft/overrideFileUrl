{
    "value": {
        "appCatalogMetadata": {
            "copilotPluginAllowedAppIds": [
                "aa183fd9-7104-46c4-af9f-9ee9b81d717e",
                "c738b607-88dd-4f16-aefe-6a824c65d25d",
                "30bb610c-6321-40fe-a047-056e7d0dac96",
                "49e6f432-d79c-49e8-94f7-89b94f3672fd",
                "5be2b320-a5b7-4221-893c-dee506e4e365",
                "3ee373aa-62fa-4fc6-b11f-9627d5b4a73d",
                "2b248bdc-b79d-35eb-ece8-e81c1ba9fcef",
                "553f93cd-a182-4243-81ac-ccee505a9121",
                "55ac82fa-249e-43b5-a5a6-4967990764eb",
                "4b00bbbb-d524-419c-bb3b-9f42aee17424",
                "05e1f66f-fcad-45c0-8a22-f3b658d375e6",
                "2b876f4d-2e6b-4ee7-9b09-8893808c1380",
                "40906836-4323-4bbe-875e-3cbb134c40a2",
                "2ad804c5-5c19-431f-8801-a9eaefbca7c7",
                "6b9cc557-e24a-4744-a370-407e717f2195",
                "3bb4a480-7767-4cca-b896-7d74592a253f",
                "7d88764a-8601-4e36-8be4-157eb48b5302",
                "8bbbc813-6d87-497c-9e7c-e401607b2347",
                "05061717-583f-47fd-aa25-ff6c3781c935",
                "abb85324-1bfa-4029-b245-782d337fcde5",
                "87000000-3db9-bb44-5015-0b4a327a6597",
                "c962d216-55b9-482b-84cf-40aa7c4b1eea",
                "280c0dfd-72bb-4297-b976-e4fab7ee82b8",
                "ba4eda44-cd55-4e15-855c-0debafb0490b",
                "c80cee99-d17f-4b2d-a2a4-57652ffd2a4b",
                "fe7c3fd3-c78f-45c3-92bb-6eb3b12533c6",
                "495bcc0e-1ebf-4429-92ea-e2d7cfc8edc9",
                "cd760caa-5d83-4df6-98bd-d26f10971d28",
                "04fdcea1-3511-499c-966d-099d59aef45f",
                "dddf988d-00af-480f-b419-76a357a72460",
                "94c84fdb-1c18-42b5-9d5a-cafb6b020a0d",
                "489c5fe7-b8b5-420b-9904-14a03489e259",
                "ab0eb89b-6ab6-48a0-afab-8a9e437dc93a",
                "c21fcfa2-1479-404c-9448-63bfc4a378b4",
                "7d0085c8-7054-4bb7-b728-a06ec1c5fe73",
                "d718fbf7-be13-4b88-99ef-bbba4e726f7e",
                "b27c082b-9d45-490a-b8bb-8dcda46c73f3",
                "3de96799-8d16-463a-9a6f-9d26d42f135f",
                "c3ff6344-f6f0-4bfa-8697-b9d47b32ca4b",
                "d136f17e-df84-47f2-97a4-13aa24c0c647",
                "d3d1be68-066c-4967-a74b-9edcf902dcfb",
                "997ba2f0-dfc4-4a1a-bdf9-ee8f26e18ab8",
                "de512141-36fb-4f5e-b6e5-c37af8b0390e",
                "bee8d388-5b98-46d6-8ecd-d89bc02d1316",
                "d2a1ed44-6cca-44d2-9b9c-1c9c1d597093",
                "eab2d3ce-6d6a-4415-abc4-5f40a8317b1f",
                "a79e783f-bd43-506c-ac03-563d8719bcf7",
                "95fb5da0-6ced-4247-9d62-294f8fcb75df",
                "e00456a5-3a89-400a-88b9-368533594cb4",
                "7f905be6-3226-4a4c-9c54-ab1edce3c99c",
                "1f510555-b518-4084-84e0-18c7bebc807c",
                "db5b69c6-0430-4ae1-8d6e-a65c2220b50c",
                "41cda9a5-16e2-4189-9d59-d0dd518085e1",
                "1d041f16-ab49-4627-bfda-6b60ad2cab6a",
                "8216e453-3db5-48ee-a3d6-5122f505c8a3",
                "d8c3ecdb-62c9-445a-a516-08bdef4376de",
                "6adc8d55-eb37-4537-a66d-743b3cd4511b",
                "82bfb2e1-cad3-4e99-8995-5d140f295ef2",
                "6fdd2aa7-2dbf-4dd9-ab61-2c0e8dd83cf7",
                "55560ea0-ae82-48b2-b71e-a45356f56bb1",
                "b6bdf576-4561-4587-8600-cd79c4523361",
                "49471a10-fdbc-4ffb-b0b8-944f3df985d9",
                "fe91c6f4-470e-4a1f-912f-44c26dca4b05",
                "adb3c870-c01c-11eb-a2cc-4dbd838985a1",
                "04ef48ab-fceb-42bc-a0c3-3252c2d43cff",
                "51a9e40e-bf0c-4ca1-bf65-ae2a48c096b4",
                "97da468e-05c9-427e-876d-3c90640b5245",
                "eb4059f8-4c52-4352-ba9a-c610e47c6427",
                "67de0563-0766-4c26-8957-2eee30c4e798"
            ],
            "copilotBotsAllowedAppIds": [],
            "federationBlockedAppIds": [
                "99e46335-5250-4a68-8499-3e4f55e6f3f6",
                "d832a33f-28c2-4969-8ad0-4fee681dc5b4",
                "7c316234-ded0-4f95-8a83-8453d0876592"
            ],
            "powerAppsDiscovery": {
                "gptTemplateAppIds": [
                    "09e19d1e-ea5e-4adf-af47-fb8dd013361f",
                    "9e2962b8-7eae-4124-86f3-1799090725e1"
                ],
                "customCopilotTemplateAppIds": [
                    "f6405520-7907-4464-8f6e-9889e2fb7d8f",
                    "958bb540-13ba-46ab-8d6a-8ab39e3e1fd8"
                ],
                "powerPlatformTemplateAppIds": [
                    "ba1cabe6-dfd2-4334-96c0-0dcdf86e18e5",
                    "f6405520-7907-4464-8f6e-9889e2fb7d8f",
                    "0fa58992-1b03-41e1-8b1d-4aa556715d20"
                ]
            },
            "mcpConfig": {
                "f0e33e18-08fc-4511-a2a7-c6bdff367263": {
                    "serverUrl": "https://mcp.asana.com/sse",
                    "authType": "oAuth2.0",
                    "oAuthConfiguration": {
                        "oAuthConfigurationId": "NzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3IyM1MTZlYzFhNi01YTQ4LTQ0NjgtODg3NS02ZTJmNTcyYjFiMTU="
                    },
                    "tools": [
                        {
                            "name": "asana_get_goals",
                            "description": "List goals filtered by context (portfolio, project, task, workspace, or team). One context required. Returns goal names, IDs. Use for goal overview or reporting.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "portfolio": {
                                        "type": "string",
                                        "description": "The portfolio to filter goals on."
                                    },
                                    "project": {
                                        "type": "string",
                                        "description": "The project to filter goals on."
                                    },
                                    "task": {
                                        "type": "string",
                                        "description": "The task to filter goals on."
                                    },
                                    "is_workspace_level": {
                                        "type": "boolean",
                                        "description": "Filter to workspace-level goals."
                                    },
                                    "team": {
                                        "type": "string",
                                        "description": "The team to filter goals on."
                                    },
                                    "workspace": {
                                        "type": "string",
                                        "description": "The workspace to filter goals on."
                                    },
                                    "time_periods": {
                                        "type": "string",
                                        "description": "Array of time period IDs to filter goals on."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of goals to return per page (1-100)."
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_goal",
                            "description": "Get detailed goal data including name, owner, current_status_update, and due_on. Use after finding goal ID via typeahead. Returns complete goal configuration needed for goal operations.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "goal_gid": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the goal."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "goal_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_create_goal",
                            "description": "Create a new goal. REQUIRES name, time_period, and either workspace or team. Use to establish objectives and key results. Returns created goal details with ID. Supports start/due dates and goal ownership assignment.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the goal. Required."
                                    },
                                    "workspace": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace. Either workspace or team MUST be specified."
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "The owner of the goal. Can be a user or team GID."
                                    },
                                    "due_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "The due date for the goal in YYYY-MM-DD format."
                                    },
                                    "start_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "The start date for the goal in YYYY-MM-DD format."
                                    },
                                    "html_notes": {
                                        "type": "string",
                                        "description": "HTML-formatted notes for the goal."
                                    },
                                    "notes": {
                                        "type": "string",
                                        "description": "Free-form textual information associated with the goal."
                                    },
                                    "is_workspace_level": {
                                        "type": "boolean",
                                        "description": "Whether the goal is a workspace-level goal."
                                    },
                                    "liked": {
                                        "type": "boolean",
                                        "description": "Whether the goal is liked."
                                    },
                                    "team": {
                                        "type": "string",
                                        "description": "The team associated with the goal. Either team or workspace MUST be specified."
                                    },
                                    "time_period": {
                                        "type": "string",
                                        "description": "The ID of the time period. Required."
                                    },
                                    "followers": {
                                        "type": "string",
                                        "description": "Comma-separated list of user IDs to follow the task"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "name",
                                    "time_period"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_parent_goals_for_goal",
                            "description": "List all parent goals for a specific goal. Returns parent goal names, IDs, and metric.progress. Use to understand goal hierarchy and relationships. Important for managing nested OKRs and goal dependencies.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "goal_gid": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the goal."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "goal_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_update_goal",
                            "description": "Update goal properties like name, owner, dates, metrics, or status. Use for adjusting timelines, progress, or reassigning ownership. Returns updated goal data. Partial updates supported - only specified fields will change.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "goal_gid": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the goal."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the goal."
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "The owner of the goal. Can be a user or team GID."
                                    },
                                    "due_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "The due date for the goal in YYYY-MM-DD format."
                                    },
                                    "start_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "The start date for the goal in YYYY-MM-DD format."
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "green",
                                            "yellow",
                                            "red",
                                            "missed",
                                            "achieved",
                                            "partial",
                                            "dropped"
                                        ],
                                        "description": "The current status of this goal. When the goal is open, its status can be green, yellow, and red to reflect \"On Track\", \"At Risk\", and \"Off Track\", respectively. When the goal is closed, the value can be missed, achieved, partial, or dropped. Note you can only write to this property if metric is set"
                                    },
                                    "html_notes": {
                                        "type": "string",
                                        "description": "HTML-formatted notes for the goal."
                                    },
                                    "notes": {
                                        "type": "string",
                                        "description": "Free-form textual information associated with the goal."
                                    },
                                    "is_workspace_level": {
                                        "type": "boolean",
                                        "description": "Whether the goal is a workspace-level goal."
                                    },
                                    "liked": {
                                        "type": "boolean",
                                        "description": "Whether the goal is liked."
                                    },
                                    "team": {
                                        "type": "string",
                                        "description": "The team associated with the goal."
                                    },
                                    "workspace": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace."
                                    },
                                    "time_period": {
                                        "type": "string",
                                        "description": "The ID of the time period."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "goal_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_portfolio",
                            "description": "Get detailed portfolio data by ID including name, owner, and projects. Use after finding portfolio ID via typeahead. Returns complete portfolio configuration. Essential for understanding portfolio context and content.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "portfolio_gid": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the portfolio"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response"
                                    }
                                },
                                "required": [
                                    "portfolio_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_portfolios",
                            "description": "List portfolios filtered by workspace and owner. REQUIRES workspace parameter. Owner defaults to \"me\" (current user) if not specified. Returns portfolio names and IDs. Use for portfolio discovery and management. Supports pagination for workspaces with many portfolios.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "workspace": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace. Required."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Results per page (1-100)"
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response"
                                    }
                                },
                                "required": [
                                    "workspace"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_items_for_portfolio",
                            "description": "List projects, goals, and other items in a portfolio. Returns item names, IDs, and types. Use for portfolio content exploration and management. Supports pagination for portfolios with many items.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "portfolio_gid": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the portfolio"
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Results per page (1-100)"
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response"
                                    }
                                },
                                "required": [
                                    "portfolio_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_project",
                            "description": "Get detailed project data including name, description, owner, members, custom fields, and settings. Use after finding project ID via typeahead. Returns complete project configuration needed for task operations. Specify opt_fields for custom fields data.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "project_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the project."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "project_id"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_project_sections",
                            "description": "List all sections in a project with their IDs. Essential for task placement and organization. Returns section names and IDs needed for creating/moving tasks. Use before creating tasks to find correct section ID.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "project_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the project."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of sections to return per page (1-100)."
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token."
                                    }
                                },
                                "required": [
                                    "project_id"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_projects",
                            "description": "List projects filtered by workspace. Supports team, archived filters. Returns project names and IDs. Use for filtered project views and bulk operations.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "workspace": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace."
                                    },
                                    "team": {
                                        "type": "string",
                                        "description": "Filter projects on team id"
                                    },
                                    "archived": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Include archived projects."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of projects to return per page (1-100)."
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token."
                                    }
                                },
                                "required": [
                                    "workspace"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_project_status",
                            "description": "Get single status update by ID. Returns color (green/yellow/red), text, author, and timestamp. Use when you know specific status ID. For all statuses, use asana_get_project_statuses instead.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "project_status_gid": {
                                        "type": "string",
                                        "description": "The project status GID to retrieve"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include"
                                    }
                                },
                                "required": [
                                    "project_status_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_project_statuses",
                            "description": "List all status updates for a project chronologically. Returns status color, text, author for each update. Use to track project health over time. Supports pagination for projects with many updates.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "project_gid": {
                                        "type": "string",
                                        "description": "The project GID to get statuses for"
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Results per page (1-100)"
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include"
                                    }
                                },
                                "required": [
                                    "project_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_create_project_status",
                            "description": "Create project status update with color (green/yellow/red) and text. Use for regular project health updates, milestone documentation, or blocker reporting. Supports HTML formatting. Returns created status ID.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "project_gid": {
                                        "type": "string",
                                        "description": "The project GID to create the status for"
                                    },
                                    "text": {
                                        "type": "string",
                                        "description": "The text content of the status update"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "The title of the status update"
                                    },
                                    "color": {
                                        "type": "string",
                                        "enum": [
                                            "green",
                                            "yellow",
                                            "red",
                                            "blue",
                                            "complete"
                                        ],
                                        "description": "The color of the status"
                                    },
                                    "html_text": {
                                        "type": "string",
                                        "description": "HTML formatted text for the status update"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include"
                                    }
                                },
                                "required": [
                                    "project_gid",
                                    "text"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_project_task_counts",
                            "description": "Get task statistics for a project. Returns counts of incomplete, completed, and milestone tasks. Use for quick project progress overview, capacity checks, or reporting dashboards.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "project_id": {
                                        "type": "string",
                                        "description": "The project ID to get task counts for"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include"
                                    }
                                },
                                "required": [
                                    "project_id"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_projects_for_team",
                            "description": "List all projects for a team. Returns both active and archived projects with IDs. Use after finding team ID via typeahead. Supports pagination for teams with many projects. Essential for team portfolio views.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "team_gid": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the team."
                                    },
                                    "archived": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Filter projects by archived status."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of projects to return per page (1-100)."
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include."
                                    }
                                },
                                "required": [
                                    "team_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_projects_for_workspace",
                            "description": "Get ALL projects in a workspace across all teams. Returns project names and IDs. Use for workspace-wide operations or when team is unknown. May return large result set - consider using typeahead search first.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "workspace_gid": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of projects to return per page (1-100)."
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token."
                                    },
                                    "archived": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Filter projects by archived status."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include."
                                    }
                                },
                                "required": [
                                    "workspace_gid"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_create_project",
                            "description": "Create new project in Asana. Every project requires a workspace, and this cannot be changed after creation. If workspace is an organization, a team must also be specified. Client agents should explicitly ask for team when creating a project rather than inferring it. Supports custom fields, templates, due dates, and privacy settings. Returns project ID for immediate task creation. Essential for project setup.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the project."
                                    },
                                    "workspace": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace. Required if team is not provided."
                                    },
                                    "team": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the team. Required if workspace is not provided."
                                    },
                                    "notes": {
                                        "type": "string",
                                        "description": "Project description."
                                    },
                                    "html_notes": {
                                        "type": "string",
                                        "description": "HTML-formatted description for the project."
                                    },
                                    "color": {
                                        "type": "string",
                                        "description": "Color of the project (light-green, dark-green, light-blue, dark-blue, etc)."
                                    },
                                    "due_date": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "Date on which this project is due (YYYY-MM-DD format)."
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "Date on which this project is started (YYYY-MM-DD format)."
                                    },
                                    "is_template": {
                                        "type": "boolean",
                                        "description": "Whether the project is a template. Defaults to false."
                                    },
                                    "public": {
                                        "type": "boolean",
                                        "description": "True if project is public to the entire workspace. Defaults to false."
                                    },
                                    "default_view": {
                                        "type": "string",
                                        "enum": [
                                            "list",
                                            "board",
                                            "calendar",
                                            "timeline"
                                        ],
                                        "description": "The default view of the project (list, board, calendar, timeline)."
                                    },
                                    "custom_fields": {
                                        "type": "string",
                                        "description": "JSON string of custom fields in format: {\"field_gid\": \"value\"}."
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "User identifier for project owner. Can be \"me\", an email, or a user GID."
                                    },
                                    "followers": {
                                        "type": "string",
                                        "description": "Comma-separated list of user GIDs to add as followers."
                                    },
                                    "members": {
                                        "type": "string",
                                        "description": "Comma-separated list of user GIDs to add as members."
                                    },
                                    "default_access_level": {
                                        "type": "string",
                                        "enum": [
                                            "admin",
                                            "editor",
                                            "commenter",
                                            "viewer"
                                        ],
                                        "description": "Default access level for project members (admin, editor, commenter, viewer)."
                                    },
                                    "minimum_access_level_for_customization": {
                                        "type": "string",
                                        "enum": [
                                            "admin",
                                            "editor"
                                        ],
                                        "description": "Minimum access level for customization (admin, editor)."
                                    },
                                    "minimum_access_level_for_sharing": {
                                        "type": "string",
                                        "enum": [
                                            "admin",
                                            "editor",
                                            "commenter",
                                            "viewer"
                                        ],
                                        "description": "Minimum access level for sharing (admin, editor, commenter, viewer)."
                                    },
                                    "icon": {
                                        "type": "string",
                                        "description": "Project icon type."
                                    },
                                    "privacy_setting": {
                                        "type": "string",
                                        "enum": [
                                            "public_to_workspace",
                                            "private_to_team",
                                            "private"
                                        ],
                                        "description": "Privacy level for the project (public_to_workspace, private_to_team, private)."
                                    },
                                    "archived": {
                                        "type": "boolean",
                                        "description": "Whether the project is archived. Defaults to false."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in response."
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_search_tasks",
                            "description": "Advanced task search with multiple filters. Supports text search, all date filters, status filters, user filters, project/portfolio/section/tag filters, and custom fields. Returns matching tasks with IDs. Handles complex queries and bulk task operations. When the user asks about tasks assigned to them, use assignee.any=\"me\" for best results. Note: If you specify projects.any and sections.any, you will receive tasks for the project and tasks for the section. If you're looking for only tasks in a section, omit the projects.any from the request.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "workspace": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace."
                                    },
                                    "text": {
                                        "type": "string",
                                        "description": "Text to search for in task name or description."
                                    },
                                    "resource_subtype": {
                                        "type": "string",
                                        "description": "Filters results by the task's resource_subtype (e.g., milestone)."
                                    },
                                    "completed": {
                                        "type": "boolean",
                                        "description": "Filter for completed or incomplete tasks."
                                    },
                                    "is_subtask": {
                                        "type": "boolean",
                                        "description": "Filter to subtasks."
                                    },
                                    "has_attachment": {
                                        "type": "boolean",
                                        "description": "Filter to tasks with attachments."
                                    },
                                    "is_blocked": {
                                        "type": "boolean",
                                        "description": "Filter to tasks with incomplete dependencies."
                                    },
                                    "is_blocking": {
                                        "type": "boolean",
                                        "description": "Filter to incomplete tasks with dependents."
                                    },
                                    "assignee.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers."
                                    },
                                    "assignee.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers to exclude."
                                    },
                                    "followers.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers."
                                    },
                                    "followers.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers to exclude."
                                    },
                                    "created_by.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers."
                                    },
                                    "created_by.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers to exclude."
                                    },
                                    "assigned_by.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers."
                                    },
                                    "assigned_by.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers to exclude."
                                    },
                                    "liked_by.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers to exclude."
                                    },
                                    "commented_on_by.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers to exclude."
                                    },
                                    "portfolios.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of portfolio IDs."
                                    },
                                    "projects.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of project IDs."
                                    },
                                    "projects.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of project IDs to exclude."
                                    },
                                    "projects.all": {
                                        "type": "string",
                                        "description": "Comma-separated list of project IDs (tasks must be in all)."
                                    },
                                    "sections.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of section or column IDs."
                                    },
                                    "sections.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of section or column IDs to exclude."
                                    },
                                    "sections.all": {
                                        "type": "string",
                                        "description": "Comma-separated list of section or column IDs (tasks must be in all)."
                                    },
                                    "tags.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of tag IDs."
                                    },
                                    "tags.not": {
                                        "type": "string",
                                        "description": "Comma-separated list of tag IDs to exclude."
                                    },
                                    "tags.all": {
                                        "type": "string",
                                        "description": "Comma-separated list of tag IDs (tasks must have all)."
                                    },
                                    "teams.any": {
                                        "type": "string",
                                        "description": "Comma-separated list of team IDs."
                                    },
                                    "due_on.before": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for due date before filter."
                                    },
                                    "due_on.after": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for due date after filter."
                                    },
                                    "due_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string or null for due date."
                                    },
                                    "due_at.before": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "ISO 8601 datetime string for due datetime before filter."
                                    },
                                    "due_at.after": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "ISO 8601 datetime string for due datetime after filter."
                                    },
                                    "start_on.before": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for start date before filter."
                                    },
                                    "start_on.after": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for start date after filter."
                                    },
                                    "start_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string or null for start date."
                                    },
                                    "created_on.before": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for creation date before filter."
                                    },
                                    "created_on.after": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for creation date after filter."
                                    },
                                    "created_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string or null for creation date."
                                    },
                                    "created_at.before": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "ISO 8601 datetime string for creation datetime before filter."
                                    },
                                    "created_at.after": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "ISO 8601 datetime string for creation datetime after filter."
                                    },
                                    "completed_on.before": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for completion date before filter."
                                    },
                                    "completed_on.after": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for completion date after filter."
                                    },
                                    "completed_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string or null for completion date."
                                    },
                                    "completed_at.before": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "ISO 8601 datetime string for completion datetime before filter."
                                    },
                                    "completed_at.after": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "ISO 8601 datetime string for completion datetime after filter."
                                    },
                                    "modified_on.before": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for modified date before filter."
                                    },
                                    "modified_on.after": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string for modified date after filter."
                                    },
                                    "modified_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "ISO 8601 date string or null for modified date."
                                    },
                                    "modified_at.before": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "ISO 8601 datetime string for modified datetime before filter."
                                    },
                                    "modified_at.after": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "ISO 8601 datetime string for modified datetime after filter."
                                    },
                                    "sort_by": {
                                        "type": "string",
                                        "description": "Field to sort by (e.g., 'due_date', 'created_at', 'completed_at', 'likes', 'modified_at'). Defaults to modified_at."
                                    },
                                    "sort_ascending": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Sort in ascending order. Defaults to false."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    },
                                    "opt_pretty": {
                                        "type": "boolean",
                                        "description": "Provides \"pretty\" output with line breaking and indentation."
                                    },
                                    "custom_fields": {
                                        "type": "string",
                                        "description": "JSON string of custom field filters in format: {\"field_gid\": \"value\"}."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of results to return (1-100)."
                                    }
                                },
                                "required": [
                                    "workspace"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_task",
                            "description": "Get full task details by ID. Returns name, description, assignee, due dates, custom fields, projects, dependencies. Essential before updating tasks. Use opt_fields for custom field values. Required for understanding task context.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the task."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "task_id"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_create_task",
                            "description": "Create task in Asana with context. REQUIRES one of: project_id, parent, or workspace+assignee together. For assignee-only tasks, both workspace and assignee must be provided. Returns task ID with confirmation. You can directly tag and mention people by using links in html_notes field",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Name of the task."
                                    },
                                    "project_id": {
                                        "type": "string",
                                        "description": "Project GID for task creation. Required if not using parent or workspace+assignee."
                                    },
                                    "workspace": {
                                        "type": "string",
                                        "description": "Workspace GID where task will be created. Required when using assignee without project_id."
                                    },
                                    "parent": {
                                        "type": "string",
                                        "description": "Parent task GID to create this as a subtask."
                                    },
                                    "html_notes": {
                                        "type": "string",
                                        "description": "Task description in HTML format. You can create links to other asana objects with the following instructions: For <a> tags specifically, to make it easier to create @-mentions through the API, we only require that you provide the GID of the object you wish to reference. If you have access to that object, the API will automatically generate the appropriate href and other attributes for you. For example, to create a link to a task with GID \"123\", you can send the tag <a data-asana-gid=\"123\"/> which will then be expanded to <a href=\"https://app.asana.com/0/0/123/f\" data-asana-accessible=\"true\" data-asana-dynamic=\"true\" data-asana-type=\"task\" data-asana-gid=\"123\">Task Name</a>. You can also generate a link to a task in a specific project or tag by including a data-asana-project or data-asana-tag attribute in the <a> tag. All other attributes, as well as the contents of the tag, are ignored.\n\nTo keep the contents of your tag and make a custom vanity link, include the property data-asana-dynamic=\"false\" when setting the contents of the tag. You would send <a data-asana-gid=\"123\" data-asana-dynamic=\"false\">This is some custom text!</a> and receive <a data-asana-accessible=\"true\" data-asana-dynamic=\"false\" data-asana-type=\"task\" data-asana-gid=\"123\">This is some custom text!</a>\n\nIf you do not have access to the referenced object when you try to create a link, the API will not generate an href for you, but will instead look for an href you provide. This allows you to write back <a> tags unmodified even if you do not have access to the resource. If you do not have access to the referenced object and no href is provided, your request will be rejected with a 400 Bad Request error. Similarly, if you provide neither a GID nor a valid href, the request will be rejected with the same error. "
                                    },
                                    "notes": {
                                        "type": "string",
                                        "description": "Task description and details."
                                    },
                                    "assignee": {
                                        "type": "string",
                                        "description": "User identifier for task assignment. Can be \"me\", an email, or a user GID. When used without project_id, workspace is also required."
                                    },
                                    "due_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "Due date in ISO 8601 format (YYYY-MM-DD)."
                                    },
                                    "due_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Due date and time in ISO 8601 format."
                                    },
                                    "resource_subtype": {
                                        "type": "string",
                                        "enum": [
                                            "default_task",
                                            "milestone",
                                            "section",
                                            "approval"
                                        ],
                                        "default": "default_task",
                                        "description": "Task type (default_task, milestone, section, approval)."
                                    },
                                    "completed": {
                                        "type": "boolean",
                                        "description": "True if the task is initially marked complete."
                                    },
                                    "approval_status": {
                                        "type": "string",
                                        "enum": [
                                            "pending",
                                            "approved",
                                            "rejected",
                                            "changes_requested"
                                        ],
                                        "description": "Approval status (pending, approved, rejected, changes_requested)."
                                    },
                                    "assignee_section": {
                                        "type": "string",
                                        "description": "Section GID to place task in the assignee's My Tasks list."
                                    },
                                    "followers": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers. Can be \"me\", email addresses, or user GIDs."
                                    },
                                    "start_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "Start date in ISO 8601 format (YYYY-MM-DD)."
                                    },
                                    "start_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Start date and time in ISO 8601 format."
                                    },
                                    "custom_fields": {
                                        "type": "string",
                                        "description": "JSON string of custom fields in format: {\"field_gid\": \"value\"}."
                                    },
                                    "custom_type": {
                                        "type": "string",
                                        "description": "GID of a custom type to apply to the task."
                                    },
                                    "custom_type_status_option": {
                                        "type": "string",
                                        "description": "GID of a custom type status option to apply to the task."
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_update_task",
                            "description": "Update existing task properties. Change name, notes, assignee, completion status, due dates, custom fields. Requires task ID. Returns updated task data. Use asana_get_task first to understand current state.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the task to update."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "New name for the task."
                                    },
                                    "notes": {
                                        "type": "string",
                                        "description": "New task description and details."
                                    },
                                    "assignee": {
                                        "type": "string",
                                        "description": "User identifier to assign the task to. Can be \"me\", an email, or a user GID."
                                    },
                                    "completed": {
                                        "type": "boolean",
                                        "description": "Mark the task as completed."
                                    },
                                    "due_on": {
                                        "type": "string",
                                        "format": "date",
                                        "description": "Due date in ISO 8601 format (YYYY-MM-DD)."
                                    },
                                    "due_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Due date and time in ISO 8601 format."
                                    },
                                    "custom_fields": {
                                        "type": "string",
                                        "description": "JSON string of custom fields in format: {\"field_gid\": \"value\"}."
                                    }
                                },
                                "required": [
                                    "task_id"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_stories_for_task",
                            "description": "Get task activity history (comments, status changes, system events). Returns chronological stories with authors and timestamps. Use for audit trails, understanding task evolution, or retrieving comments.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the task."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of sections to return per page (1-100)."
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token."
                                    }
                                },
                                "required": [
                                    "task_id"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_create_task_story",
                            "description": "Add explicit comment to task. ONLY for discussion, feedback, questions, or context not captured by automatic activity logging. Task actions (assignments, status changes) are logged automatically. Returns story ID.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the task."
                                    },
                                    "text": {
                                        "type": "string",
                                        "description": "The text content of the comment."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "task_id",
                                    "text"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_set_task_dependencies",
                            "description": "Set tasks this task depends on (prerequisites). Creates dependency relationship where this task is blocked until dependencies complete. Use for workflow sequencing and project planning. Requires list of task IDs.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "The task ID to add dependencies to"
                                    },
                                    "dependencies": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Array of task IDs that this task depends on"
                                    }
                                },
                                "required": [
                                    "task_id",
                                    "dependencies"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_set_task_dependents",
                            "description": "Set tasks blocked by this task (tasks waiting on this one). Creates dependency where other tasks cannot start until this completes. Use for blocking relationships in project schedules. Requires list of task IDs.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "The task ID to add dependents to"
                                    },
                                    "dependents": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Array of task IDs that depend on this task"
                                    }
                                },
                                "required": [
                                    "task_id",
                                    "dependents"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_set_parent_for_task",
                            "description": "Change task parent (convert to/from subtask). Set parent=null to make regular task. Supports insert positioning among siblings. Use for reorganizing task hierarchy. Returns updated task hierarchy data.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "The task ID to operate on"
                                    },
                                    "parent": {
                                        "type": "string",
                                        "description": "The GID of the new parent of the task, or null for no parent"
                                    },
                                    "insert_before": {
                                        "type": "string",
                                        "description": "A subtask of the parent to insert the task before, or null to insert at the end of the list"
                                    },
                                    "insert_after": {
                                        "type": "string",
                                        "description": "A subtask of the parent to insert the task after, or null to insert at the beginning of the list"
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include"
                                    }
                                },
                                "required": [
                                    "task_id",
                                    "parent"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_get_tasks",
                            "description": "List tasks filtered by context (workspace/project/tag/section/user list). One context required. Supports assignee, date filters. Returns task names and IDs. Use for filtered task views and bulk operations.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "workspace": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace."
                                    },
                                    "project": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the project."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "The tag GID to retrieve tasks for"
                                    },
                                    "section": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the section."
                                    },
                                    "user_task_list": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the user task list."
                                    },
                                    "assignee": {
                                        "type": "string",
                                        "description": "User identifier to assign the task to. Can be \"me\", an email, or a user GID."
                                    },
                                    "completed_since": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Filter for tasks completed since this date in datetime format."
                                    },
                                    "modified_since": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Filter for tasks modified since this date in datetime format."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    },
                                    "limit": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of sections to return per page (1-100)."
                                    },
                                    "offset": {
                                        "type": "string",
                                        "description": "Pagination offset token."
                                    }
                                },
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_delete_task",
                            "description": "Delete task from Asana. Use with extreme caution as recovery is challenging. Deletes the task and any subtasks that are not also in another project. Returns success confirmation. Requires task ID. Essential for removing duplicate or obsolete tasks.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the task to delete."
                                    }
                                },
                                "required": [
                                    "task_id"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_add_task_followers",
                            "description": "Add followers to task (team members to notify of updates). Automatically sends notifications for task changes. Returns updated followers list. Essential for task collaboration and visibility.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the task."
                                    },
                                    "followers": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers. Can be \"me\", email addresses, or user GIDs."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "task_id",
                                    "followers"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_remove_task_followers",
                            "description": "Remove followers from task (stop notification subscriptions). Prevents future notifications while maintaining history. Returns updated followers list. Essential for reducing notification noise or when team members change.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "task_id": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the task."
                                    },
                                    "followers": {
                                        "type": "string",
                                        "description": "Comma-separated list of user identifiers. Can be \"me\", email addresses, or user GIDs."
                                    },
                                    "opt_fields": {
                                        "type": "string",
                                        "description": "Comma-separated list of optional fields to include in the response."
                                    }
                                },
                                "required": [
                                    "task_id",
                                    "followers"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        },
                        {
                            "name": "asana_typeahead_search",
                            "description": "Quick search across Asana objects. ALWAYS use this FIRST before specialized search. Returns most relevant items based on recency and usage. Faster than dedicated search tools for finding specific items. Works for: users, projects, tasks, teams, tags, portfolios, goals. Empty query returns recently accessed items. DO NOT guess the workspace GID. If no workspace GID is provided look it up.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "workspace_gid": {
                                        "type": "string",
                                        "description": "Globally unique identifier for the workspace."
                                    },
                                    "resource_type": {
                                        "type": "string",
                                        "enum": [
                                            "custom_field",
                                            "goal",
                                            "project",
                                            "project_template",
                                            "portfolio",
                                            "tag",
                                            "task",
                                            "team",
                                            "user"
                                        ],
                                        "description": "The type of resource to search for."
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "The search query. Can be empty to get default results for the resource type."
                                    },
                                    "count": {
                                        "type": "number",
                                        "minimum": 1,
                                        "maximum": 100,
                                        "description": "Number of results to return. Default is 20 if parameter is empty. Minimum 1, maximum 100."
                                    }
                                },
                                "required": [
                                    "workspace_gid",
                                    "resource_type"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            }
                        }
                    ]
                },
                "aa183fd9-7104-46c4-af9f-9ee9b81d717e": {
                    "serverUrl": "https://mcp.atlassian.com/v1/sse",
                    "authType": "oAuth2.0",
                    "oAuthConfiguration": {
                        "oAuthConfigurationId": "NzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3IyM2MTBkMTIxNC1jZTM5LTQ0Y2MtOTQwYy0yYTYxYjI1MDY1Nzk="
                    },
                    "tools": [
                        {
                            "name": "atlassianUserInfo",
                            "description": "Get current user info from Atlassian",
                            "inputSchema": {
                                "type": "object",
                                "properties": {},
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getAccessibleAtlassianResources",
                            "description": "Get cloudid to construct API calls to Atlassian REST APIs",
                            "inputSchema": {
                                "type": "object",
                                "properties": {},
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getConfluenceSpaces",
                            "description": "Get spaces from Confluence. Spaces are containers for pages and content, organized by teams or topics. Use this to discover available spaces before accessing their content. You can also use this with a space key to get the numerical space ID needed for other operations.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "ids": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "number"
                                                }
                                            }
                                        ],
                                        "description": "Filter by specific numerical space IDs"
                                    },
                                    "keys": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        ],
                                        "description": "Filter by space keys (unique identifiers)"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "global",
                                            "collaboration",
                                            "knowledge_base",
                                            "personal"
                                        ],
                                        "description": "Filter by space type"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "current",
                                            "archived"
                                        ],
                                        "description": "Filter by space status"
                                    },
                                    "labels": {
                                        "anyOf": [
                                            {
                                                "type": "string"
                                            },
                                            {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        ],
                                        "description": "Filter by space labels"
                                    },
                                    "favoritedBy": {
                                        "type": "string",
                                        "description": "Filter spaces favorited by a specific user account ID"
                                    },
                                    "notFavoritedBy": {
                                        "type": "string",
                                        "description": "Filter spaces not favorited by a specific user account ID"
                                    },
                                    "sort": {
                                        "type": "string",
                                        "enum": [
                                            "id",
                                            "-id",
                                            "key",
                                            "-key",
                                            "name",
                                            "-name"
                                        ],
                                        "description": "Sort order for results"
                                    },
                                    "descriptionFormat": {
                                        "type": "string",
                                        "enum": [
                                            "plain",
                                            "view"
                                        ],
                                        "description": "Format for space descriptions"
                                    },
                                    "includeIcon": {
                                        "type": "boolean",
                                        "description": "Include space icon information in response"
                                    },
                                    "cursor": {
                                        "type": "string",
                                        "description": "Pagination cursor for retrieving next page of results"
                                    },
                                    "limit": {
                                        "type": "number",
                                        "description": "Maximum number of spaces to return (default: 25, max: 250)"
                                    }
                                },
                                "required": [
                                    "cloudId"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getConfluencePage",
                            "description": "Get a specific page or live doc data (including body content) from Confluence by its ID. Returns the page body content converted to Markdown format. You can extract the page ID from Confluence URLs - for example, from a URL like https://yoursite.atlassian.net/wiki/spaces/SPACE/pages/123456789/Page+Title, the page ID is \"123456789\". The URL can be used as the cloudId parameter, as the tool will handle converting the site name to a cloud ID.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "pageId": {
                                        "type": "string",
                                        "description": "The unique identifier of the page to retrieve. Can be extracted from Confluence URLs (e.g., the numeric ID in the URL path)"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "pageId"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getPagesInConfluenceSpace",
                            "description": "Get all pages within a specific Confluence space. Useful for discovering content structure and finding pages by title or status. Returns page body content as Markdown.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "spaceId": {
                                        "type": "string",
                                        "description": "The unique numerical identifier of the space to search within"
                                    },
                                    "limit": {
                                        "type": "number",
                                        "description": "Maximum number of pages to return (default: 25, max: 250)"
                                    },
                                    "cursor": {
                                        "type": "string",
                                        "description": "Opaque cursor for pagination"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "current",
                                            "archived",
                                            "deleted",
                                            "trashed"
                                        ],
                                        "description": "Filter pages by status"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Filter pages by title"
                                    },
                                    "sort": {
                                        "type": "string",
                                        "enum": [
                                            "id",
                                            "-id",
                                            "created-date",
                                            "-created-date",
                                            "modified-date",
                                            "-modified-date",
                                            "title",
                                            "-title"
                                        ],
                                        "description": "Sort pages by field(s)"
                                    },
                                    "depth": {
                                        "type": "string",
                                        "enum": [
                                            "all",
                                            "root"
                                        ],
                                        "description": "Filter pages by depth, default: all"
                                    },
                                    "subtype": {
                                        "type": "string",
                                        "enum": [
                                            "live",
                                            "page"
                                        ],
                                        "description": "Filter pages by subtype. Use \"live\" for live docs or \"page\" for regular pages"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "spaceId"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getConfluencePageFooterComments",
                            "description": "Get footer comments for a Confluence page. Footer comments are general comments about the page that appear at the bottom, not tied to specific content. Returns comment body content as Markdown.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "pageId": {
                                        "type": "string",
                                        "description": "The unique identifier of the page whose footer comments to retrieve"
                                    },
                                    "limit": {
                                        "type": "number",
                                        "description": "Maximum number of comments to return"
                                    },
                                    "cursor": {
                                        "type": "string",
                                        "description": "Pagination cursor for retrieving next page of results"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "current",
                                            "archived",
                                            "trashed",
                                            "deleted",
                                            "historical",
                                            "draft"
                                        ],
                                        "default": "current",
                                        "description": "Filter comments by status"
                                    },
                                    "sort": {
                                        "type": "string",
                                        "enum": [
                                            "id",
                                            "-id",
                                            "created-date",
                                            "-created-date"
                                        ],
                                        "description": "Sort order for comments"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "pageId"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getConfluencePageInlineComments",
                            "description": "Get inline comments for a Confluence page. Inline comments are attached to specific text selections within the page content.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "pageId": {
                                        "type": "string",
                                        "description": "The unique identifier of the page whose inline comments to retrieve"
                                    },
                                    "limit": {
                                        "type": "number",
                                        "description": "Maximum number of comments to return"
                                    },
                                    "cursor": {
                                        "type": "string",
                                        "description": "Pagination cursor for retrieving next page of results"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "current",
                                            "archived",
                                            "trashed",
                                            "deleted",
                                            "historical",
                                            "draft"
                                        ],
                                        "default": "current",
                                        "description": "Filter comments by status"
                                    },
                                    "resolutionStatus": {
                                        "type": "string",
                                        "enum": [
                                            "resolved",
                                            "open",
                                            "dangling",
                                            "reopened"
                                        ],
                                        "default": "open",
                                        "description": "Filter comments by resolution status"
                                    },
                                    "sort": {
                                        "type": "string",
                                        "enum": [
                                            "id",
                                            "-id",
                                            "created-date",
                                            "-created-date"
                                        ],
                                        "description": "Sort order for comments"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "pageId"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "createConfluencePage",
                            "description": "Create a new page in Confluence. Can create regular pages or live docs based on the subtype parameter.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "spaceId": {
                                        "type": "string",
                                        "description": "The unique numerical identifier of the space where the page will be created"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "The title of the new page"
                                    },
                                    "parentId": {
                                        "type": "string",
                                        "description": "The unique identifier of the parent page (if creating a child page)"
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The content of the page. You **MUST** use markdown format."
                                    },
                                    "isPrivate": {
                                        "type": "boolean",
                                        "description": "The page will be private. Only the user who creates this page will have permission to view and edit one."
                                    },
                                    "subtype": {
                                        "type": "string",
                                        "enum": [
                                            "live"
                                        ],
                                        "description": "The subtype of the page. Set to \"live\" to create a live doc, or omit to create a regular page."
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "spaceId",
                                    "body"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": false
                            }
                        },
                        {
                            "name": "updateConfluencePage",
                            "description": "Update an existing page or Live Doc in Confluence.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "pageId": {
                                        "type": "string",
                                        "description": "The unique identifier of the existing page to update"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "The new title for the page (if not provided, retains the existing title)"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "current",
                                            "draft"
                                        ],
                                        "default": "current",
                                        "description": "The status of the page to update (defaults to current). If draft is specified, then the page's draft version will be updated."
                                    },
                                    "spaceId": {
                                        "type": "string",
                                        "description": "The unique numerical identifier of the space (if moving the page)"
                                    },
                                    "parentId": {
                                        "type": "string",
                                        "description": "The unique identifier of the parent page (if changing hierarchy)"
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The content of the page. You **MUST** use markdown format."
                                    },
                                    "versionMessage": {
                                        "type": "string",
                                        "description": "Optional message describing the changes made in this version"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "pageId",
                                    "body"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": false
                            }
                        },
                        {
                            "name": "createConfluenceFooterComment",
                            "description": "Create a footer comment on a Confluence page or blog post. Footer comments are general comments about the page that appear at the bottom.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "pageId": {
                                        "type": "string",
                                        "description": "The id of the page to add the comment to."
                                    },
                                    "parentCommentId": {
                                        "type": "string",
                                        "description": "The id of the parent comment to reply to."
                                    },
                                    "attachmentId": {
                                        "type": "string",
                                        "description": "The id of the attachment to add to the comment."
                                    },
                                    "customContentId": {
                                        "type": "string",
                                        "description": "The id of the custom content to add to the comment."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The content of the comment in Markdown format."
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "body"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": false
                            }
                        },
                        {
                            "name": "createConfluenceInlineComment",
                            "description": "Create an inline comment on a page or blog post. Inline comments are attached to specific text selections within the page content.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "pageId": {
                                        "type": "string",
                                        "description": "The id of the page to add the comment to."
                                    },
                                    "parentCommentId": {
                                        "type": "string",
                                        "description": "The id of the parent comment to reply to."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "The content of the comment in Markdown format."
                                    },
                                    "inlineCommentProperties": {
                                        "type": "object",
                                        "properties": {
                                            "textSelection": {
                                                "type": "string",
                                                "description": "The text to highlight"
                                            },
                                            "textSelectionMatchCount": {
                                                "type": "number",
                                                "description": "The number of matches for the selected text on the page (should be strictly greater than textSelectionMatchIndex)"
                                            },
                                            "textSelectionMatchIndex": {
                                                "type": "number",
                                                "description": "The match index to highlight. This is zero-based. E.g. if you have 3 occurrences of \"hello world\" on a page and you want to highlight the second occurrence, you should pass 1 for textSelectionMatchIndex and 3 for textSelectionMatchCount."
                                            }
                                        },
                                        "required": [
                                            "textSelection",
                                            "textSelectionMatchCount",
                                            "textSelectionMatchIndex"
                                        ],
                                        "additionalProperties": false,
                                        "description": "Object describing the text to highlight on the page/blog post. Only applicable for top level inline comments (not replies) and required in that case."
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "body"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": false
                            }
                        },
                        {
                            "name": "searchConfluenceUsingCql",
                            "description": "Search content in Confluence using CQL (Confluence Query Language). CQL is a powerful query language for finding pages, spaces, and content based on various criteria like title, content, labels, creation date, etc.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "cql": {
                                        "type": "string",
                                        "description": "The CQL query string (e.g., \"title ~ 'meeting' AND type = page\")"
                                    },
                                    "cqlcontext": {
                                        "type": "string",
                                        "description": "The context for the CQL query execution"
                                    },
                                    "cursor": {
                                        "type": "string",
                                        "description": "Pagination cursor for retrieving next page of results"
                                    },
                                    "expand": {
                                        "type": "string",
                                        "description": "Comma-separated list of properties to expand in the response"
                                    },
                                    "limit": {
                                        "type": "number",
                                        "description": "Maximum number of results to return (default: 25, max: 250)"
                                    },
                                    "prev": {
                                        "type": "boolean",
                                        "description": "Include previous page link in pagination"
                                    },
                                    "next": {
                                        "type": "boolean",
                                        "description": "Include next page link in pagination"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "cql"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getJiraIssue",
                            "description": "Get the details of a Jira issue by issue id or key.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "issueIdOrKey": {
                                        "type": "string",
                                        "description": "Issue id or key can be used to uniquely identify an existing issue.\nIssue id is a numerical identifier. An example issue id is 10000.\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\nAn example issue key is ISSUE-1."
                                    },
                                    "fields": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "fieldsByKeys": {
                                        "type": "boolean"
                                    },
                                    "expand": {
                                        "type": "string"
                                    },
                                    "properties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "updateHistory": {
                                        "type": "boolean"
                                    },
                                    "failFast": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "issueIdOrKey"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "editJiraIssue",
                            "description": "Update the details of an existing Jira issue id or key.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "issueIdOrKey": {
                                        "type": "string",
                                        "description": "Issue id or key can be used to uniquely identify an existing issue.\nIssue id is a numerical identifier. An example issue id is 10000.\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\nAn example issue key is ISSUE-1."
                                    },
                                    "fields": {
                                        "type": "object",
                                        "additionalProperties": {}
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "issueIdOrKey",
                                    "fields"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": false
                            }
                        },
                        {
                            "name": "createJiraIssue",
                            "description": "Create a new Jira issue in a given project with a given issue type.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "projectKey": {
                                        "type": "string",
                                        "description": "A project key in Jira is a unique identifier (a string of letters, numbers and sometimes underscores) of a project.\n      There is a tool \"getVisibleJiraProjects\" to look up which projects the user has create permission to create a new Jira issue."
                                    },
                                    "issueTypeName": {
                                        "type": "string",
                                        "description": "A Jira issue type categorizes and  distinguishes different kinds of work being tracked within a project.\n      It's a way to define what a specific piece of work represents.\n      For example, in a Jira Software project, there are \"Epic\", \"Story\", \"Task\", \"Bug\" or \"Subtask\" issue types by default.\n      Or in Jira Service Management, there are \"Change\", \"IT help\", \"Incident\", \"New feature\", \"Problem\", \"Service request\", \"Service request with approval\" or \"Support\" issue types by default.\n      User can remove those default ones and/or define their own issue types as well.\n      There is a tool \"getJiraProjectIssueTypesMetadata\" to get the available issue types in a given project."
                                    },
                                    "summary": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "The content of the issue's description in Markdown format."
                                    },
                                    "parent": {
                                        "type": "string",
                                        "description": "The issue key or id of the parent issue for \"Subtask\" issue types."
                                    },
                                    "assignee_account_id": {
                                        "type": "string",
                                        "description": "During issue creation, we can set an assignee for the new issue.\n      The input must be an account id of a valid user in the given cloud id.\n      There is a tool \"atlassianUserInfo\" to get the account id of the current user.\n      There is a tool \"lookupJiraAccountId\" to get the account ids of the existing users in Jira based on the user's display name or email address."
                                    },
                                    "additional_fields": {
                                        "type": "object",
                                        "additionalProperties": {}
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "projectKey",
                                    "issueTypeName",
                                    "summary"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": false
                            }
                        },
                        {
                            "name": "getTransitionsForJiraIssue",
                            "description": "Get available transitions for an existing Jira issue id or key.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "issueIdOrKey": {
                                        "type": "string",
                                        "description": "Issue id or key can be used to uniquely identify an existing issue.\nIssue id is a numerical identifier. An example issue id is 10000.\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\nAn example issue key is ISSUE-1."
                                    },
                                    "expand": {
                                        "type": "string"
                                    },
                                    "transitionId": {
                                        "type": "string"
                                    },
                                    "skipRemoteOnlyCondition": {
                                        "type": "boolean"
                                    },
                                    "includeUnavailableTransitions": {
                                        "type": "boolean"
                                    },
                                    "sortByOpsBarAndStatus": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "issueIdOrKey"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "transitionJiraIssue",
                            "description": "Transition an existing Jira issue (that has issue id or key) to a new status.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "issueIdOrKey": {
                                        "type": "string",
                                        "description": "Issue id or key can be used to uniquely identify an existing issue.\nIssue id is a numerical identifier. An example issue id is 10000.\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\nAn example issue key is ISSUE-1."
                                    },
                                    "transition": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ],
                                        "additionalProperties": false
                                    },
                                    "fields": {
                                        "type": "object",
                                        "additionalProperties": {}
                                    },
                                    "update": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "additionalProperties": {
                                                    "description": "This is the field value. The actual value will depends on the field type."
                                                }
                                            },
                                            "description": "List of operations"
                                        }
                                    },
                                    "historyMetadata": {
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "descriptionKey": {
                                                "type": "string"
                                            },
                                            "activityDescription": {
                                                "type": "string"
                                            },
                                            "activityDescriptionKey": {
                                                "type": "string"
                                            },
                                            "emailDescription": {
                                                "type": "string"
                                            },
                                            "emailDescriptionKey": {
                                                "type": "string"
                                            },
                                            "actor": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "string"
                                                    },
                                                    "displayName": {
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    },
                                                    "avatarUrl": {
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "generator": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "string"
                                                    },
                                                    "displayName": {
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    },
                                                    "avatarUrl": {
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "cause": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "string"
                                                    },
                                                    "displayName": {
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    },
                                                    "avatarUrl": {
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "type": "string"
                                                    }
                                                },
                                                "additionalProperties": false
                                            },
                                            "extraData": {
                                                "type": "object",
                                                "additionalProperties": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "issueIdOrKey",
                                    "transition"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": false
                            }
                        },
                        {
                            "name": "lookupJiraAccountId",
                            "description": "Lookup account ids of existing users in Jira based on the user's display name or email address.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "searchString": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "searchString"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "searchJiraIssuesUsingJql",
                            "description": "Search Jira issues using Jira Query Language (JQL).",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "jql": {
                                        "type": "string",
                                        "description": "A Jira Query Language (JQL) expression to search Jira issues"
                                    },
                                    "maxResults": {
                                        "type": "number",
                                        "maximum": 100,
                                        "default": 50,
                                        "description": "A maximum number of issue to search per page. Default is 50, max is 100"
                                    },
                                    "fields": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "default": [
                                            "summary",
                                            "description",
                                            "status",
                                            "issuetype",
                                            "priority",
                                            "created"
                                        ]
                                    },
                                    "nextPageToken": {
                                        "type": "string",
                                        "description": "This is used for pagination purpose to fetch more data if a JQL search has more issues in next pages"
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "jql"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "addCommentToJiraIssue",
                            "description": "Adds a comment to an existing Jira issue id or key.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "issueIdOrKey": {
                                        "type": "string",
                                        "description": "Issue id or key can be used to uniquely identify an existing issue.\nIssue id is a numerical identifier. An example issue id is 10000.\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\nAn example issue key is ISSUE-1."
                                    },
                                    "commentBody": {
                                        "type": "string",
                                        "description": "The content of the comment in Markdown format."
                                    },
                                    "commentVisibility": {
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "group",
                                                    "role"
                                                ],
                                                "description": "Whether visibility of this comment is restricted to a group or role."
                                            },
                                            "value": {
                                                "type": "string",
                                                "description": "The name of the group or role that visibility of this comment is restricted to."
                                            }
                                        },
                                        "required": [
                                            "type",
                                            "value"
                                        ],
                                        "additionalProperties": false
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "issueIdOrKey",
                                    "commentBody"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": false
                            }
                        },
                        {
                            "name": "getJiraIssueRemoteIssueLinks",
                            "description": "Get remote issue links (eg: Confluence links etc...) of an existing Jira issue id or key",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "issueIdOrKey": {
                                        "type": "string",
                                        "description": "Issue id or key can be used to uniquely identify an existing issue.\nIssue id is a numerical identifier. An example issue id is 10000.\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\nAn example issue key is ISSUE-1."
                                    },
                                    "globalId": {
                                        "type": "string",
                                        "description": "An identifier for the remote item in the remote system.\n          For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: appId=456&pageId=123.\n          When a global ID is provided, this tool returns only the remote issue link of the given Jira issue that has the provided global ID.\n          When no global ID is provided, this tool returns all the remote issue links of the given Jira issue."
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "issueIdOrKey"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getVisibleJiraProjects",
                            "description": "Get visible Jira projects for which the user has either view, browse, edit or create permission on that project.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "searchString": {
                                        "type": "string",
                                        "description": "Filter the results using a literal string. Projects with a matching key or name are returned (case insensitive)"
                                    },
                                    "action": {
                                        "type": "string",
                                        "enum": [
                                            "view",
                                            "browse",
                                            "edit",
                                            "create"
                                        ],
                                        "default": "create",
                                        "description": "\n      Filter results by projects for which the user can:\n      * view the project\n      * browse the project\n      * edit the project\n      * create the project, meaning that they have the Create issues project permission for the project in which the issue is created.\n      "
                                    },
                                    "startAt": {
                                        "type": "number",
                                        "default": 0,
                                        "description": "The index of the first item to return in a page of results (page offset)."
                                    },
                                    "maxResults": {
                                        "type": "number",
                                        "maximum": 50,
                                        "default": 50,
                                        "description": "The maximum number of items to return per page."
                                    },
                                    "expandIssueTypes": {
                                        "type": "boolean",
                                        "default": true,
                                        "description": "To include additional information about the issue types associated with the project"
                                    }
                                },
                                "required": [
                                    "cloudId"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        },
                        {
                            "name": "getJiraProjectIssueTypesMetadata",
                            "description": "Get a page of issue type metadata for a specified project. The issue type metadata will be used to create issue.",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "cloudId": {
                                        "type": "string",
                                        "description": "Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL or extracted from Atlassian URLs - for example, from https://yoursite.atlassian.net/wiki/.... If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs."
                                    },
                                    "projectIdOrKey": {
                                        "type": "string"
                                    },
                                    "startAt": {
                                        "type": "number",
                                        "default": 0,
                                        "description": "The index of the first item to return in a page of results (page offset)."
                                    },
                                    "maxResults": {
                                        "type": "number",
                                        "maximum": 200,
                                        "default": 50,
                                        "description": "The maximum number of items to return per page."
                                    }
                                },
                                "required": [
                                    "cloudId",
                                    "projectIdOrKey"
                                ],
                                "additionalProperties": false,
                                "$schema": "http://json-schema.org/draft-07/schema#"
                            },
                            "annotations": {
                                "readOnlyHint": true
                            }
                        }
                    ]
                },
                "30bb610c-6321-40fe-a047-056e7d0dac96": {
                    "serverUrl": "https://mcp.atlassian.com/v1/sse",
                    "authType": "oAuth2.0",
                    "oAuthConfiguration": {
                        "oAuthConfigurationId": "NzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3IyM2MTBkMTIxNC1jZTM5LTQ0Y2MtOTQwYy0yYTYxYjI1MDY1Nzk="
                    },
                    "tools": []
                },
                "ca9e26b7-dce5-44a0-b2b7-a70a3d65ce25": {
                    "serverUrl": "https://api.githubcopilot.com/mcp",
                    "authType": "oAuth2.0",
                    "oAuthConfiguration": {
                        "oAuthConfigurationId": "MjQzMmI1N2ItMGFiZC00M2RiLWFhN2ItMTZlYWRkMTE1ZDM0IyM2MTUzZTMyOS1lODZhLTRjMzQtOGYyMi0zNzZmN2QxY2NmZTY="
                    },
                    "tools": [{
      "name": "list_issues",
      "description": "List issues in a GitHub repository.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "direction": {
            "description": "Sort direction",
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string"
          },
          "labels": {
            "description": "Filter by labels",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "owner": {
            "description": "Repository owner",
            "type": "string"
          },
          "page": {
            "description": "Page number for pagination (min 1)",
            "minimum": 1,
            "type": "number"
          },
          "perPage": {
            "description": "Results per page for pagination (min 1, max 100)",
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          },
          "repo": {
            "description": "Repository name",
            "type": "string"
          },
          "since": {
            "description": "Filter by date (ISO 8601 timestamp)",
            "type": "string"
          },
          "sort": {
            "description": "Sort order",
            "enum": [
              "created",
              "updated",
              "comments"
            ],
            "type": "string"
          },
          "state": {
            "description": "Filter by state",
            "enum": [
              "open",
              "closed",
              "all"
            ],
            "type": "string"
          }
        },
        "required": [
          "owner",
          "repo"
        ]
      },
      "annotations": {
        "title": "List issues",
        "readOnlyHint": true
      }
    }]
                }
            },
            "sharePointAppsDiscovery": {
                "customCopilotTemplateAppIds": [
                    "d6949b98-b305-43dc-a291-4c6cff67f88e"
                ]
            },
            "agentCenterMetadata": {
                "blockedSharedAppResource": [
                    "SharedPointSharedApp"
                ]
            }
        }
    }
}
